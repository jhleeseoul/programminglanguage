(* Binary Tree Implementation in K- *)

let proc leaf(n) =
  { val := n, left := unit, right := unit }
in

let proc makeLtree(n, l) =
  { val := n, left := l, right := unit }
in

let proc makeRtree(n, r) =
  { val := n, left := unit, right := r }
in

let proc makeTree(n, l, r) =
  { val := n, left := l, right := r }
in

let proc isLeaf(t) =
  if t.left = unit then
    if t.right = unit then
      true
    else
      false
  else
    false
in

let proc isLtree(t) =
  if not (t.left = unit) then
    if t.right = unit then
      true
    else
      false
  else
    false
in

let proc isRtree(t) =
  if t.left = unit then
    if not (t.right = unit) then
      true
    else
      false
  else
    false
in

let proc isLRtree(t) =
  if not (t.left = unit) then
    if not (t.right = unit) then
      true
    else
      false
  else
    false
in

let proc nodeVal(t) =
  t.val
in

let proc lTree(t) =
  t.left
in

let proc rTree(t) =
  t.right
in

let proc dft(t) =
  
  if isLeaf(t) then
    write t.val
  else if isLtree(t) then
    (write t.val; dft(t.left))
  else if isRtree(t) then
    (write t.val; dft(t.right))
  else
    (write t.val; dft(t.left); dft(t.right))
in

(* Breadth-First Traversal *)

let proc printLevel(t, d) =
  if d = 0 then
    write t.val
  else
    (if not (t.left = unit) then printLevel(t.left, d - 1) else unit;
     if not (t.right = unit) then printLevel(t.right, d - 1) else unit)
in

let proc height(t) =
  if isLeaf(t) then
    1
  else if isLtree(t) then
    1 + height(t.left)
  else if isRtree(t) then
    1 + height(t.right)
  else
    let hl := height(t.left) in
    let hr := height(t.right) in
    if hl < hr then hr + 1 else hl + 1
in

let proc bft(t) =
  let i := 0 in
  let h := height(t) in
  while i < h do
    (printLevel(t, i); i := i + 1)
in
2025


(* Build Tree:
        1
      /   \
     2     3
    / \   / \
   4   5 6   7

   output:
    1                                   
    2
    4
    5
    3
    6
    7
    1
    2
    3
    4
    5
    6
    7
*)
(*
let t :=
  makeTree(1,
    makeTree(2,
      leaf(4),
      leaf(5)),
    makeTree(3,
      leaf(6),
      leaf(7)))
in

dft(t);
bft(t)
*)